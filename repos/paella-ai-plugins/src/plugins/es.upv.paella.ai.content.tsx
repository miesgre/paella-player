import { type ReactNode } from 'react';
import type { PluginConfig } from '@asicupv/paella-core';

import PackagePluginModule from './PackagePluginModule';
import { PreactButtonPlugin } from './PreactButtonPlugin/PreactButtonPlugin';
//import BrainIcon from "../icons/brain-circuit.svg?raw";
import AIIcon from "../icons/ai.svg?raw";
import TabContainer, { TabItem } from "../ui/TabContainer";
import AIToolView from "../ui/AIToolView";
import AIToolPodcast from "../ui/AIToolPodcast.js"; 

import '../css/es.upv.paella.aitools.css';

export type AIContentData = {
    content: string | null;
    mediaUrl?: string | null;
};


export type AIContentPluginConfig = PluginConfig & {
    mode?: "dialog" | "popup";
    // chat?: {
    //     enabled?: boolean;
    //     // model?: string;
    //     // baseUrl?: string;
    //     // promptMessage?: string;
    // };
};



export default class AIContentPlugin extends PreactButtonPlugin  {
    summary: AIContentData | null = null;
    faq: AIContentData | null = null;
    study_plan: AIContentData | null = null;
    timeline: AIContentData | null = null;
    podcast: AIContentData | null = null;
    
    getPluginModuleInstance() {
        return PackagePluginModule.Get();
    }

    get name() {
        return super.name || "es.upv.paella.ai.content";
    }

    get config(): AIContentPluginConfig {
        return super.config as AIContentPluginConfig;
    }

    getAriaLabel() {
        return this.player.translate('AI-generated content');
    }

    getDescription() {
        return this.getAriaLabel();
    }

    async load() {
        this.icon = this.player.getCustomPluginIcon(this.name, "generated-content") || AIIcon;
    }

    async getHelp() {
        return {
            title: "Discover AI-Generated Content",
            description: "Use this button to access helpful content generated by artificial intelligence like summaries, key questions, and audio insights. Itâ€™s designed to save you time and help you understand faster."
        };
    }

    async isEnabled(): Promise<boolean> {
        if (!(await super.isEnabled())) {
            return false;
        }

                
        // Try to load the data from the data plugin and enabled the plugin if the data is available
        this.summary = await this.player.data.read("ai.content", "summary");
        this.faq = await this.player.data.read("ai.content", "faq");
        this.study_plan = await this.player.data.read("ai.content", "study_plan");
        this.timeline = await this.player.data.read("ai.content", "timeline");
        this.podcast = await this.player.data.read("ai.content", "podcast");
        

        let data_available = this.summary?.content || this.faq?.content || this.study_plan?.content || this.timeline?.content || this.podcast?.content; // || this.config?.chat?.enabled;

        return !!data_available;
    }


    getReactNode(): ReactNode {        
        const t = this.player.translate;
        return (
            <TabContainer>                
                { this.summary?.content && <TabItem label={t('Summary')}>
                    <AIToolView
                        data={this.summary}
                    />
                </TabItem>
                }
                { this.faq?.content && <TabItem label={t("FAQ")}>
                    <AIToolView
                        data={this.faq}
                    />
                </TabItem>
                }
                { this.study_plan?.content && <TabItem label={t("Study plan")}>
                    <AIToolView
                        data={this.study_plan}                    
                    />
                </TabItem>
                }
                { this.timeline?.content && <TabItem label={t("Timeline")}>
                    <AIToolView
                        data={this.timeline}
                    />
                </TabItem>
                }
                { this.podcast?.content && <TabItem label={t("Podcast")}>
                    <AIToolPodcast data={this.podcast} />
                </TabItem>
                }                
            </TabContainer>
        );
    }
    
}
