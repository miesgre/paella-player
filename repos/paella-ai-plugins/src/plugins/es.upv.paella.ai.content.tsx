// import 'preact';
import { StrictMode, type RefObject } from 'react';
import { createRoot } from 'react-dom/client';
import { PopUpButtonPlugin, type PluginConfig } from '@asicupv/paella-core';
import PackagePluginModule from './PackagePluginModule';
import BrainIcon from "../icons/brain-circuit.svg?raw";
import { AIDialog } from '../ui/AIToolsDialog';
import { AIToolsContainer } from '../ui/AIToolsContainer';


import '../css/es.upv.paella.aitools.css';

export type AIContentData = {
    content: string | null;
    mediaUrl?: string | null;
};


export type AIContentPluginConfig = PluginConfig & {
    mode?: "dialog" | "popup";
    // chat?: {
    //     enabled?: boolean;
    //     // model?: string;
    //     // baseUrl?: string;
    //     // promptMessage?: string;
    // };
};



export default class AIContentPlugin extends PopUpButtonPlugin  {
    summary: AIContentData | null = null;
    faq: AIContentData | null = null;
    study_plan: AIContentData | null = null;
    timeline: AIContentData | null = null;
    podcast: AIContentData | null = null;
    
    getPluginModuleInstance() {
        return PackagePluginModule.Get();
    }

    get name() {
        return super.name || "es.upv.paella.ai.content";
    }

    get config(): AIContentPluginConfig {
        return super.config as AIContentPluginConfig;
    }

    getAriaLabel() {
        return this.player.translate('AI-generated content');
    }

    getDescription() {
        return this.getAriaLabel();
    }

    async load() {
        this.icon = this.player.getCustomPluginIcon(this.name, "generated-content") || BrainIcon;        
    }    

    async getHelp() {
        return {
            title: "Discover AI-Generated Content",
            description: "Use this button to access helpful content generated by artificial intelligence like summaries, key questions, and audio insights. Itâ€™s designed to save you time and help you understand faster."
        };
    }

    async isEnabled(): Promise<boolean> {
        if (!(await super.isEnabled())) {
            return false;
        }

                
        // Try to load the data from the data plugin and enabled the plugin if the data is available
        this.summary = await this.player.data.read("ai.content", "summary");
        this.faq = await this.player.data.read("ai.content", "faq");
        this.study_plan = await this.player.data.read("ai.content", "study_plan");
        this.timeline = await this.player.data.read("ai.content", "timeline");
        this.podcast = await this.player.data.read("ai.content", "podcast");
        

        let data_available = this.summary?.content || this.faq?.content || this.study_plan?.content || this.timeline?.content || this.podcast?.content; // || this.config?.chat?.enabled;

        return !!data_available;
    }

    private _appRootElement: HTMLDivElement | null = null;
    dialogRef: RefObject<HTMLDialogElement| null> | null = null;

    async action() {
        if (this.config.mode === "popup") {
            return super.action();
        }
        // If the mode is dialog, we create the dialog element and render the AIDialog component
        if (this._appRootElement === null) {
            this._appRootElement = document.createElement("div");
            this._appRootElement.classList.add("AIToolsPlugin-dialog");
    
            document.body.appendChild(this._appRootElement);
                        
            createRoot(this._appRootElement).render(
                <StrictMode>
                    <AIDialog paellaPlugin={this} />
                </StrictMode>
            );
            // We need to wait a bit to ensure the dialog is rendered
            // Otherwise, the dialogRef will be null when we try to show it
            setTimeout(() => this.dialogRef?.current?.show(), 50);
        }
        if (this.dialogRef?.current?.open) {
            this.dialogRef?.current?.close();
        }
        else {
            this.dialogRef?.current?.show();
        }
    }

    async getContent(): Promise<HTMLElement> {
        if (this._appRootElement === null) {
            this._appRootElement = document.createElement("div");        
            this._appRootElement.classList.add("AIToolsPlugin-popup");
        
            createRoot(this._appRootElement).render(
                <StrictMode>
                    <AIToolsContainer paellaPlugin={this} />
                </StrictMode>
            );
        }
        return this._appRootElement;
    }
}
